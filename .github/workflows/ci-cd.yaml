name: CI/CD - Build, Push & Create Manifests PR

on:
  push:
    branches:
      - main

env:
  IMAGE_REPO: vitoryuji25/hello-app

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_REPO }}:latest
            ${{ env.IMAGE_REPO }}:${{ github.sha }}

      - name: Configure SSH for manifests repo
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Clone manifests repo and create update branch
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Clona o repositório de manifestos
          git clone git@github.com:VitorYuji25/hello-manifests.git manifests
          cd manifests

          # Configura o Git
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"

          # Cria uma nova branch para a atualização da imagem
          git checkout -b update-image-${IMAGE_TAG}

          # <-- MUDANÇA AQUI: Aponta para o arquivo dentro da pasta k8s
          # Atualiza o arquivo de deployment com a nova tag da imagem
          sed -i "s|image: .*|image: ${{ env.IMAGE_REPO }}:${IMAGE_TAG}|g" k8s/deployment.yaml

          # Adiciona a alteração e faz o commit e push para a nova branch
          git add k8s/deployment.yaml
          git commit -m "ci: update image to ${IMAGE_TAG}"
          git push origin update-image-${IMAGE_TAG}

      - name: Check if PR token is available
        id: check_token
        run: |
          if [ -n "${{ secrets.MANIFESTS_GITHUB_TOKEN }}" ]; then
            echo "token_present=true" >> $GITHUB_OUTPUT
          else
            echo "token_present=false" >> $GITHUB_OUTPUT
          fi


      - name: Create PR in manifests repo (via GitHub API)
        if: steps.check_token.outputs.token_present == 'true'
        env:
          GITHUB_API_TOKEN: ${{ secrets.MANIFESTS_GITHUB_TOKEN }}
          BRANCH: update-image-${{ github.sha }}
        run: |
          # Cria o corpo da requisição para abrir o Pull Request
          cat > payload.json <<EOF
          {
            "title": "ci: update image to ${{ github.sha }}",
            "head": "${BRANCH}",
            "base": "main",
            "body": "Automated image update from CI"
          }
          EOF

          # Envia a requisição para a API do GitHub
          curl -s -X POST -H "Authorization: token $GITHUB_API_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/VitorYuji25/hello-manifests/pulls \
            -d @payload.json
